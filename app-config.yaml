app:
  title: Scaffolded Backstage App
  baseUrl: http://localhost:3000

organization:
  name: My Company

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: http://localhost:7007
  listen:
    port: 7007
    # Uncomment the following host directive to bind to specific interfaces
    # host: 127.0.0.1
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  database:
    client: better-sqlite3
    connection: ':memory:'
    # client: pg
    # connection: 'postgresql://myuser:mypass@localhost:5432/mydb1'
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir
  permission:
    enabled: true  # Enable permissions


integrations:
  github:
    - host: github.com
      # This is a Personal Access Token or PAT from GitHub. You can find out how to generate this token, and more information
      # about setting up the GitHub integration here: https://backstage.io/docs/integrations/github/locations#configuration
      # token: ${GITHUB_TOKEN}
      token: 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
    ### Example for how to add your GitHub Enterprise instance using the API:
    # - host: ghe.example.net
    #   apiBaseUrl: https://ghe.example.net/api/v3
    #   token: ${GHE_TOKEN}

proxy:
  ### Example for how to add a proxy endpoint for the frontend.
  ### A typical reason to do this is to handle HTTPS and CORS for internal services.
  endpoints:
    '/uselessfacts/api':
      changeOrigin: true
      target: 'https://uselessfacts.jsph.pl'
      secure: false
  '/api':
    target: 'http://localhost:3003' # Change this to the URL of your Node.js application
    allowedMethods: ['GET', 'POST', 'PUT', 'DELETE'] # Adjust allowed HTTP methods as needed

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  # requestUrl: http://localhost:7000/api/techdocs
  # storageUrl: http://localhost:7000/api/techdocs/static/docs
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'local' # Alternatives - 'local'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

auth:
  # see https://backstage.io/docs/auth/ to learn about auth providers
  allowGuestAccess: true
  environment: development
  providers:
    github:
      development:
        clientId: 5b75f4ef288e6e284f54
        clientSecret: a7fab177a51daaaa2a903577f0ed2db81921833d
        signIn:
          resolvers:
            - resolver: emailMatchingUserEntityProfileEmail
            - resolver: emailLocalPartMatchingUserEntityName
            - resolver: usernameMatchingUserEntityName

# auth:
#   environment: development
#   providers:
#     bitbucket:
#       development:
#         clientId: stmyuNtCJqUX8NSNCa
#         clientSecret: qegFWTYqQVKCAw4k8YZ9ar8cHhMwmG86

# auth:
#   providers:
#     - id: bitbucket
#       title: Bitbucket
#       clientId: YOUR_BITBUCKET_CLIENT_ID
#       clientSecret: YOUR_BITBUCKET_CLIENT_SECRET
#       scope:
#         - repository
#         - pullrequest




scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, API, Resource, Location]
  locations:
    # Local example data, file locations are relative to the backend process, typically `packages/backend`
    - type: file
      target: ../../examples/entities.yaml

    # Local example template
    - type: file
      target: ../../examples/template/template.yaml
      rules:
        - allow: [Template]

    # Local example organizational data
    - type: file
      target: ../../examples/org.yaml
      rules:
        - allow: [User, Group]

    - type: file
      # target: ../../catalog-model/api/hello-world-api.yaml
      target: ../catalog-model/examples/api/hello-world-api.yaml

    - type: file
      target: ../openapi-specs/my-api/openapi.yaml

    - type: file
      target: ../catalog-model/examples/all.yaml  

    - type: file
      target: ../catalog-model/examples/apis/my-api.yaml  

    - type: file
      target: ../catalog-model/examples/apis/my-book-api.yaml  

    - type: file
      target: ../catalog-model/examples/apis/my-weather-api.yaml

    # - type: file
    #   target: ../catalog-model/examples/apis/my-product-api.yaml  

    - type: file
      target: ../catalog-model/examples/apis/book-test-api.yaml   

    # - type: file
    #   target: ../catalog-model/examples/components/node-app.yaml

    - type: file
      target: ../catalog-model/examples/components/my-ex1-plugin-component.yaml

    - type: file
      target: ../catalog-model/examples/components/tokenBalance-app.yaml

    - type: file
      target: ../catalog-model/examples/components/weather-app.yaml

    - type: file
      target: ../catalog-model/examples/components/product-app-component.yaml 

    - type: file
      target: ../catalog-model/examples/components/my-backstage-app-component.yaml             

    ## Uncomment these lines to add more example data
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all.yaml

    ## Uncomment these lines to add an example org
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/acme-corp.yaml
    #   rules:
    #     - allow: [User, Group]

  # catalog:
  # rules:
  #   ...
  # backend:
  #   proxy:
  #     baseUrl: https://api.example.com/catalog
  # locations:
  #   - url: file:./catalog-info

  # rules:
  #   - allow: [Component, System, API, Resource, Location]
  # locations:
  #   - url: file:./catalog-info
  # locations:
  #   # Local example data, file locations are relative to the backend process, typically `packages/backend`
  #   - type: file
  #     target: ./catalog-info 


